/*! For license information please see 980a3111.ea5202d0.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[223],{2525:function(e){var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(a){return!1}}()?Object.assign:function(e,o){for(var l,i,s=a(e),c=1;c<arguments.length;c++){for(var u in l=Object(arguments[c]))n.call(l,u)&&(s[u]=l[u]);if(t){i=t(l);for(var p=0;p<i.length;p++)r.call(l,i[p])&&(s[i[p]]=l[i[p]])}}return s}},1535:function(e,t,n){var r=n(2525),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,l=a?Symbol.for("react.portal"):60106,i=a?Symbol.for("react.fragment"):60107,s=a?Symbol.for("react.strict_mode"):60108,c=a?Symbol.for("react.profiler"):60114,u=a?Symbol.for("react.provider"):60109,p=a?Symbol.for("react.context"):60110,d=a?Symbol.for("react.forward_ref"):60112,m=a?Symbol.for("react.suspense"):60113,f=a?Symbol.for("react.suspense_list"):60120,h=a?Symbol.for("react.memo"):60115,g=a?Symbol.for("react.lazy"):60116;a&&Symbol.for("react.fundamental"),a&&Symbol.for("react.responder"),a&&Symbol.for("react.scope");var y="function"==typeof Symbol&&Symbol.iterator;function k(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var N={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function v(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||N}function b(){}function C(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||N}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw k(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var S=C.prototype=new b;S.constructor=C,r(S,v.prototype),S.isPureReactComponent=!0;var E={current:null},x={suspense:null},j={current:null},T=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,a={},l=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)T.call(t,r)&&!I.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];a.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:o,type:e,key:l,ref:i,props:a,_owner:j.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var M=/\/+/g,P=[];function R(e,t,n,r){if(P.length){var a=P.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function _(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function $(e,t,n,r){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var i=!1;if(null===e)i=!0;else switch(a){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case o:case l:i=!0}}if(i)return n(r,e,""===t?"."+D(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=t+D(a=e[s],s);i+=$(a,c,n,r)}else if(null===e||"object"!=typeof e?c=null:c="function"==typeof(c=y&&e[y]||e["@@iterator"])?c:null,"function"==typeof c)for(e=c.call(e),s=0;!(a=e.next()).done;)i+=$(a=a.value,c=t+D(a,s++),n,r);else if("object"===a)throw n=""+e,k(Error(31),"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function q(e,t,n){return null==e?0:$(e,"",t,n)}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function W(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,(function(e){return e})):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(M,"$&/")+"/"),q(e,W,t=R(t,o,r,a)),_(t)}function L(){var e=E.current;if(null===e)throw k(Error(321));return e}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;q(e,B,t=R(null,null,t,n)),_(t)},count:function(e){return q(e,(function(){return null}),null)},toArray:function(e){var t=[];return U(e,t,null,(function(e){return e})),t},only:function(e){if(!A(e))throw k(Error(143));return e}},createRef:function(){return{current:null}},Component:v,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return L().useCallback(e,t)},useContext:function(e,t){return L().useContext(e,t)},useEffect:function(e,t){return L().useEffect(e,t)},useImperativeHandle:function(e,t,n){return L().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return L().useLayoutEffect(e,t)},useMemo:function(e,t){return L().useMemo(e,t)},useReducer:function(e,t,n){return L().useReducer(e,t,n)},useRef:function(e){return L().useRef(e)},useState:function(e){return L().useState(e)},Fragment:i,Profiler:c,StrictMode:s,Suspense:m,unstable_SuspenseList:f,createElement:O,cloneElement:function(e,t,n){if(null==e)throw k(Error(267),e);var a=r({},e.props),l=e.key,i=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,s=j.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)T.call(t,u)&&!I.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){c=Array(u);for(var p=0;p<u;p++)c[p]=arguments[p+2];a.children=c}return{$$typeof:o,type:e.type,key:l,ref:i,props:a,_owner:s}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.10.2",unstable_withSuspenseConfig:function(e,t){var n=x.suspense;x.suspense=void 0===t?null:t;try{e()}finally{x.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:E,ReactCurrentBatchConfig:x,ReactCurrentOwner:j,IsSomeRendererActing:{current:!1},assign:r}},G={default:F},H=G&&F||G;e.exports=H.default||H},7378:function(e,t,n){n(1535)},3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7916:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7378),n(3905)),l=["components"],i={title:"Beginner Tutorial",hide_title:!0},s="Beginner Tutorial",c={unversionedId:"introduction/BeginnerTutorial",id:"introduction/BeginnerTutorial",isDocsHomePage:!1,title:"Beginner Tutorial",description:"Objectives of this tutorial",source:"@site/../docs/introduction/BeginnerTutorial.md",sourceDirName:"introduction",slug:"/introduction/BeginnerTutorial",permalink:"/docs/introduction/BeginnerTutorial",editUrl:"https://github.com/redux-saga/redux-saga/edit/master/docs/../docs/introduction/BeginnerTutorial.md",tags:[],version:"current",frontMatter:{title:"Beginner Tutorial",hide_title:!0},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/introduction/GettingStarted"},next:{title:"Saga Background",permalink:"/docs/introduction/SagaBackground"}},u=[{value:"Objectives of this tutorial",id:"objectives-of-this-tutorial",children:[{value:"The initial setup",id:"the-initial-setup",children:[],level:3}],level:2},{value:"Hello Sagas!",id:"hello-sagas",children:[],level:2},{value:"Making Asynchronous calls",id:"making-asynchronous-calls",children:[],level:2},{value:"Making our code testable",id:"making-our-code-testable",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"beginner-tutorial"},"Beginner Tutorial"),(0,o.kt)("h2",{id:"objectives-of-this-tutorial"},"Objectives of this tutorial"),(0,o.kt)("p",null,"This tutorial attempts to introduce redux-saga in a (hopefully) accessible way."),(0,o.kt)("p",null,"For our getting started tutorial, we are going to use the trivial Counter demo from the Redux repo. The application is quite basic but is a good fit to illustrate the basic concepts of redux-saga without being lost in excessive details."),(0,o.kt)("h3",{id:"the-initial-setup"},"The initial setup"),(0,o.kt)("p",null,"Before we start, clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redux-saga/redux-saga-beginner-tutorial"},"tutorial repository"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The final code of this tutorial is located in the ",(0,o.kt)("inlineCode",{parentName:"p"},"sagas")," branch.")),(0,o.kt)("p",null,"Then in the command line, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd redux-saga-beginner-tutorial\n$ npm install\n")),(0,o.kt)("p",null,"To start the application, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm start\n")),(0,o.kt)("p",null,"We are starting with the most basic use case: 2 buttons to ",(0,o.kt)("inlineCode",{parentName:"p"},"Increment")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Decrement")," a counter. Later, we will introduce asynchronous calls."),(0,o.kt)("p",null,"If things go well, you should see 2 buttons ",(0,o.kt)("inlineCode",{parentName:"p"},"Increment")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Decrement")," along with a message below showing ",(0,o.kt)("inlineCode",{parentName:"p"},"Counter: 0"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In case you encountered an issue with running the application. Feel free to create an issue on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redux-saga/redux-saga-beginner-tutorial/issues"},"tutorial repo"),".")),(0,o.kt)("h2",{id:"hello-sagas"},"Hello Sagas!"),(0,o.kt)("p",null,"We are going to create our first Saga. Following the tradition, we will write our 'Hello, world' version for Sagas."),(0,o.kt)("p",null,"Create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"sagas.js")," then add the following snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export function* helloSaga() {\n  console.log('Hello Sagas!')\n}\n")),(0,o.kt)("p",null,"So nothing scary, just a normal function (except for the ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),"). All it does is print a greeting message into the console."),(0,o.kt)("p",null,"In order to run our Saga, we need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"create a Saga middleware with a list of Sagas to run (so far we have only one ",(0,o.kt)("inlineCode",{parentName:"li"},"helloSaga"),")"),(0,o.kt)("li",{parentName:"ul"},"connect the Saga middleware to the Redux store")),(0,o.kt)("p",null,"We will make the changes to ",(0,o.kt)("inlineCode",{parentName:"p"},"main.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// ...\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\n// ...\nimport { helloSaga } from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\nsagaMiddleware.run(helloSaga)\n\nconst action = type => store.dispatch({type})\n\n// rest unchanged\n")),(0,o.kt)("p",null,"First we import our Saga from the ",(0,o.kt)("inlineCode",{parentName:"p"},"./sagas")," module. Then we create a middleware using the factory function ",(0,o.kt)("inlineCode",{parentName:"p"},"createSagaMiddleware")," exported by the ",(0,o.kt)("inlineCode",{parentName:"p"},"redux-saga")," library."),(0,o.kt)("p",null,"Before running our ",(0,o.kt)("inlineCode",{parentName:"p"},"helloSaga"),", we must connect our middleware to the Store using ",(0,o.kt)("inlineCode",{parentName:"p"},"applyMiddleware"),". Then we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"sagaMiddleware.run(helloSaga)")," to start our Saga."),(0,o.kt)("p",null,"So far, our Saga does nothing special. It just logs a message then exits."),(0,o.kt)("h2",{id:"making-asynchronous-calls"},"Making Asynchronous calls"),(0,o.kt)("p",null,"Now let's add something closer to the original Counter demo. To illustrate asynchronous calls, we will add another button to increment the counter 1 second after the click."),(0,o.kt)("p",null,"First things first, we'll provide an additional button and a callback ",(0,o.kt)("inlineCode",{parentName:"p"},"onIncrementAsync")," to the UI component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Counter = ({ value, onIncrement, onDecrement, onIncrementAsync }) =>\n  <div>\n    <button onClick={onIncrementAsync}>\n      Increment after 1 second\n    </button>\n    {' '}\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n    {' '}\n    <button onClick={onDecrement}>\n      Decrement\n    </button>\n    <hr />\n    <div>\n      Clicked: {value} times\n    </div>\n  </div>\n")),(0,o.kt)("p",null,"Next we should connect the ",(0,o.kt)("inlineCode",{parentName:"p"},"onIncrementAsync")," of the Component to a Store action."),(0,o.kt)("p",null,"We will modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"main.js")," module as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function render() {\n  ReactDOM.render(\n    <Counter\n      value={store.getState()}\n      onIncrement={() => action('INCREMENT')}\n      onDecrement={() => action('DECREMENT')}\n      onIncrementAsync={() => action('INCREMENT_ASYNC')} />,\n    document.getElementById('root')\n  )\n}\n")),(0,o.kt)("p",null,"Note that unlike in redux-thunk, our component dispatches a plain object action."),(0,o.kt)("p",null,"Now we will introduce another Saga to perform the asynchronous call. Our use case is as follows:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"On each ",(0,o.kt)("inlineCode",{parentName:"p"},"INCREMENT_ASYNC")," action, we want to start a task that will do the following")),(0,o.kt)("blockquote",null,(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"Wait 1 second then increment the counter"))),(0,o.kt)("p",null,"Add the following code to the ",(0,o.kt)("inlineCode",{parentName:"p"},"sagas.js")," module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { put, takeEvery } from 'redux-saga/effects'\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\n// ...\n\n// Our worker Saga: will perform the async increment task\nexport function* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nexport function* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n")),(0,o.kt)("p",null,"Time for some explanations."),(0,o.kt)("p",null,"We create a ",(0,o.kt)("inlineCode",{parentName:"p"},"delay")," function that returns a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise")," that will resolve after a specified number of milliseconds. We'll use this function to ",(0,o.kt)("em",{parentName:"p"},"block")," the Generator."),(0,o.kt)("p",null,"Sagas are implemented as ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"Generator functions")," that ",(0,o.kt)("em",{parentName:"p"},"yield")," objects to the redux-saga middleware. The yielded objects are a kind of instruction to be interpreted by the middleware. When a Promise is yielded to the middleware, the middleware will suspend the Saga until the Promise completes. In the above example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync")," Saga is suspended until the Promise returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"delay")," resolves, which will happen after 1 second."),(0,o.kt)("p",null,"Once the Promise is resolved, the middleware will resume the Saga, executing code until the next yield. In this example, the next statement is another yielded object: the result of calling ",(0,o.kt)("inlineCode",{parentName:"p"},"put({type: 'INCREMENT'})"),", which instructs the middleware to dispatch an ",(0,o.kt)("inlineCode",{parentName:"p"},"INCREMENT")," action."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"put")," is one example of what we call an ",(0,o.kt)("em",{parentName:"p"},"Effect"),". Effects are plain JavaScript objects which contain instructions to be fulfilled by the middleware. When a middleware retrieves an Effect yielded by a Saga, the Saga is paused until the Effect is fulfilled."),(0,o.kt)("p",null,"So to summarize, the ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync")," Saga sleeps for 1 second via the call to ",(0,o.kt)("inlineCode",{parentName:"p"},"delay(1000)"),", then dispatches an ",(0,o.kt)("inlineCode",{parentName:"p"},"INCREMENT")," action."),(0,o.kt)("p",null,"Next, we created another Saga ",(0,o.kt)("inlineCode",{parentName:"p"},"watchIncrementAsync"),". We use ",(0,o.kt)("inlineCode",{parentName:"p"},"takeEvery"),", a helper function provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"redux-saga"),", to listen for dispatched ",(0,o.kt)("inlineCode",{parentName:"p"},"INCREMENT_ASYNC")," actions and run ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync")," each time."),(0,o.kt)("p",null,"Now we have 2 Sagas, and we need to start them both at once. To do that, we'll add a ",(0,o.kt)("inlineCode",{parentName:"p"},"rootSaga")," that is responsible for starting our other Sagas. In the same file ",(0,o.kt)("inlineCode",{parentName:"p"},"sagas.js"),", refactor the file as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { put, takeEvery, all } from 'redux-saga/effects'\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\nfunction* helloSaga() {\n  console.log('Hello Sagas!')\n}\n\nfunction* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\nfunction* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n\n// notice how we now only export the rootSaga\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchIncrementAsync()\n  ])\n}\n")),(0,o.kt)("p",null,"This Saga yields an array with the results of calling our two sagas, ",(0,o.kt)("inlineCode",{parentName:"p"},"helloSaga")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"watchIncrementAsync"),". This means the two resulting Generators will be started in parallel. Now we only have to invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"sagaMiddleware.run")," on the root Saga in ",(0,o.kt)("inlineCode",{parentName:"p"},"main.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// ...\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = ...\nsagaMiddleware.run(rootSaga)\n\n// ...\n")),(0,o.kt)("h2",{id:"making-our-code-testable"},"Making our code testable"),(0,o.kt)("p",null,"We want to test our ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync")," Saga to make sure it performs the desired task."),(0,o.kt)("p",null,"Create another file ",(0,o.kt)("inlineCode",{parentName:"p"},"sagas.spec.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import test from 'tape'\n\nimport { incrementAsync } from './sagas'\n\ntest('incrementAsync Saga test', (assert) => {\n  const gen = incrementAsync()\n\n  // now what ?\n})\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync")," is a generator function. When run, it returns an iterator object, and the iterator's ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," method returns an object with the following shape"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"gen.next() // => { done: boolean, value: any }\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," field contains the yielded expression, i.e. the result of the expression after\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"yield"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"done")," field indicates if the generator has terminated or if there are still\nmore 'yield' expressions."),(0,o.kt)("p",null,"In the case of ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync"),", the generator yields 2 values consecutively:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"yield delay(1000)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"yield put({type: 'INCREMENT'})"))),(0,o.kt)("p",null,"So if we invoke the next method of the generator 3 times consecutively we get the following\nresults:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"gen.next() // => { done: false, value: <result of calling delay(1000)> }\ngen.next() // => { done: false, value: <result of calling put({type: 'INCREMENT'})> }\ngen.next() // => { done: true, value: undefined }\n")),(0,o.kt)("p",null,"The first 2 invocations return the results of the yield expressions. On the 3rd invocation\nsince there is no more yield the ",(0,o.kt)("inlineCode",{parentName:"p"},"done")," field is set to true. And since the ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync"),"\nGenerator doesn't return anything (no ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," statement), the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," field is set to\n",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("p",null,"So now, in order to test the logic inside ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync"),", we'll have to iterate\nover the returned Generator and check the values yielded by the generator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import test from 'tape'\n\nimport { incrementAsync } from './sagas'\n\ntest('incrementAsync Saga test', (assert) => {\n  const gen = incrementAsync()\n\n  assert.deepEqual(\n    gen.next(),\n    { done: false, value: ??? },\n    'incrementAsync should return a Promise that will resolve after 1 second'\n  )\n})\n")),(0,o.kt)("p",null,"The issue is how do we test the return value of ",(0,o.kt)("inlineCode",{parentName:"p"},"delay"),"? We can't do a simple equality test\non Promises. If ",(0,o.kt)("inlineCode",{parentName:"p"},"delay")," returned a ",(0,o.kt)("em",{parentName:"p"},"normal")," value, things would've been easier to test."),(0,o.kt)("p",null,"Well, ",(0,o.kt)("inlineCode",{parentName:"p"},"redux-saga")," provides a way to make the above statement possible. Instead of calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"delay(1000)")," directly inside ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync"),", we'll call it ",(0,o.kt)("em",{parentName:"p"},"indirectly")," and export it\nto make a subsequent deep comparison possible:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { put, takeEvery, all, call } from 'redux-saga/effects'\n\nexport const delay = (ms) => new Promise(res => setTimeout(res, ms))\n\n// ...\n\nexport function* incrementAsync() {\n  // use the call Effect\n  yield call(delay, 1000)\n  yield put({ type: 'INCREMENT' })\n}\n")),(0,o.kt)("p",null,"Instead of doing ",(0,o.kt)("inlineCode",{parentName:"p"},"yield delay(1000)"),", we're now doing ",(0,o.kt)("inlineCode",{parentName:"p"},"yield call(delay, 1000)"),". What's the difference?"),(0,o.kt)("p",null,"In the first case, the yield expression ",(0,o.kt)("inlineCode",{parentName:"p"},"delay(1000)")," is evaluated before it gets passed to the caller of ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," (the caller could be the middleware when running our code. It could also be our test code which runs the Generator function and iterates over the returned Generator). So what the caller gets is a Promise, like in the test code above."),(0,o.kt)("p",null,"In the second case, the yield expression ",(0,o.kt)("inlineCode",{parentName:"p"},"call(delay, 1000)")," is what gets passed to the caller of ",(0,o.kt)("inlineCode",{parentName:"p"},"next"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"call")," just like ",(0,o.kt)("inlineCode",{parentName:"p"},"put"),", returns an Effect which instructs the middleware to call a given function with the given arguments. In fact, neither ",(0,o.kt)("inlineCode",{parentName:"p"},"put")," nor ",(0,o.kt)("inlineCode",{parentName:"p"},"call")," performs any dispatch or asynchronous call by themselves, they return plain JavaScript objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"put({type: 'INCREMENT'}) // => { PUT: {type: 'INCREMENT'} }\ncall(delay, 1000)        // => { CALL: {fn: delay, args: [1000]}}\n")),(0,o.kt)("p",null,"What happens is that the middleware examines the type of each yielded Effect then decides how to fulfill that Effect. If the Effect type is a ",(0,o.kt)("inlineCode",{parentName:"p"},"PUT")," then it will dispatch an action to the Store. If the Effect is a ",(0,o.kt)("inlineCode",{parentName:"p"},"CALL")," then it'll call the given function."),(0,o.kt)("p",null,"This separation between Effect creation and Effect execution makes it possible to test our Generator in a surprisingly easy way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import test from 'tape'\n\nimport { put, call } from 'redux-saga/effects'\nimport { incrementAsync, delay } from './sagas'\n\ntest('incrementAsync Saga test', (assert) => {\n  const gen = incrementAsync()\n\n  assert.deepEqual(\n    gen.next().value,\n    call(delay, 1000),\n    'incrementAsync Saga must call delay(1000)'\n  )\n\n  assert.deepEqual(\n    gen.next().value,\n    put({type: 'INCREMENT'}),\n    'incrementAsync Saga must dispatch an INCREMENT action'\n  )\n\n  assert.deepEqual(\n    gen.next(),\n    { done: true, value: undefined },\n    'incrementAsync Saga must be done'\n  )\n\n  assert.end()\n})\n")),(0,o.kt)("p",null,"Since ",(0,o.kt)("inlineCode",{parentName:"p"},"put")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"call")," return plain objects, we can reuse the same functions in our test code. And to test the logic of ",(0,o.kt)("inlineCode",{parentName:"p"},"incrementAsync"),", we iterate over the generator and do ",(0,o.kt)("inlineCode",{parentName:"p"},"deepEqual")," tests on its values."),(0,o.kt)("p",null,"In order to run the above test, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm test\n")),(0,o.kt)("p",null,"which should report the results on the console."))}d.isMDXComponent=!0}}]);